// SPDX-License-Identifier: MIT



pragma solidity >=0.6.12 <0.9.0;

contract ReceiveEther {
   address public owner;

    // Event to log the deposit in blockchain
    constructor() {
      owner = msg.sender;
    }

     modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _; // Continue executing the function
    }

        event Deposit(address sender, uint256 amount);
       event Withdraw(address sender, uint256 amount);
    // Function to receive Ether , external for access outside 
    // payble to get the etch
    receive() external payable {
      require(msg.sender.balance >= msg.value, "Insufficient balance to send Ether");
        // Emit an event to log the deposit
        emit Deposit(msg.sender, msg.value);
    }

    // Function to check the contract's balance 
   function getBalance() public view returns (uint256) {
      
      return address(this).balance;
  }

   // Function to withdraw Ether, only callable by the owner
    function withdraw(uint256 amount) public onlyOwner {
        require(amount <= address(this).balance, "Insufficient balance");
        payable(msg.sender).transfer(amount);
        emit Withdraw(msg.sender, amount);
    }
}
